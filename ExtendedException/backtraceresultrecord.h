/**
 * backtraceresultrecord.h
 * Erick Veil
 * 2017-01-30
 *
 * Objects from this class are the data representation of a singel line from a
 * backtrace produced by glibc::execinfo.h::backtrace_symbols().
 *
 * The purpose is to break down the string data into more parsable data types,
 * such as actual integer for the address, and pulling out program and funciton
 * names to clean the garbage off of them and create a more readable stack
 * trace report.
 *
 * Legends have told that you just have to compile with the -rdynamic option
 * and your backtrace_symbols() funtion will magically relate all of the
 * symbles for you, but in every test, it does not work.
 *
 * So we resort to executing `nm` and parsing out the symbols manually from
 * its output.
 *
 * Note that the BactraceResultRecord is different from a SymbolRecord, though
 * they are similar.
 *
 * The BactraceResultRecord is a single line of a stack trace, while the
 * SymbolRecord is a single line of the `nm` command. We match
 * BactraceResultRecords with their corresponding SymbolRecords to determine
 * the name of the method that a line in the trace belongs to.
 *
 * Trace lines look like this:
 * "home/blah/blah/program_name() [0x1234f4332]"
 *
 * Symbol records look like this:
 * 00000000004035f8 T vToolKit::BackTraceResultRecord::getHexRecordAddress()
 *
 * We use the hex value from the trace line to match the hex address on the
 * symbol record, and that tells us the method name to use on the trace line.
 */
#ifndef BACKTRACERESULTRECORD_H
#define BACKTRACERESULTRECORD_H

#include <QDebug>
#include <QString>
#include <QStringList>

#include "symboltable.h"


namespace vToolKit {

class BackTraceResultRecord
{
    QString _trace_line = "";
    QString _program_name = "";
    QString _hex_address = "";
    QString _method_name = "";
    int _record_address = -1;
    SymbolTable _symbol_table;

 public:
    /**
     * @brief BackTraceResultRecord
     *
     * @param trace_line This string is the raw data from a bactrace. It is one
     * single line, generated by a call to symboltable.h::bactrace_symbols(),
     * and then converted into a QString.
     *
     * @param symbol_table The symbol table object, which is loaded with a
     * list of SumbolRecord objects that define all the possible symbols in the
     * executable.
     */
    BackTraceResultRecord(QString trace_line, SymbolTable symbol_table);

    /**
     * @brief getProgramName
     *
     * @return The name of the program or library that the method can be
     * found in.
     */
    QString getProgramName();

    /**
     * @brief getRecordAddress
     *
     * @return The memory address of the trace line as an integer.
     */
    int getRecordAddress();

    /**
     * @brief getHexRecordAddress
     *
     * @return The memory address of the trace line as hexadecimal.
     */
    QString getHexRecordAddress();

    /**
     * @brief getMethodName
     *
     * This is where the magic starts.
     *
     * @return The method name for the trace line.
     */
    QString getMethodName();

 private:
    void _initParsedData();
    void _parseProgramName();

    /**
     * Gets "program_name" out of a string like:
     * "home/blah/blah/program_name() [0x1234f4332]"
     *
     * @brief _parseRecordAddress
     */
    void _parseRecordAddress();

    void _parseHexAddress();

    /**
     * This will return -1 if there is a problem.
     *
     * @brief _hexAddressToIntAddress
     * @param hex_string
     * @return
     */
    int _hexAddressToIntAddress(QString hex_string);

    void _parseMethodName();
    void _determineMethodNameWithTable();
};

}  // namespace vToolKit

#endif  // BACKTRACERESULTRECORD_H
